// Code generated by go-bindata.
// sources:
// templates/base.tf
// templates/sec_group.tf
// DO NOT EDIT!

package cloudstack

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesBaseTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x6f\x6b\x23\xb7\x13\x7e\xbf\x9f\x62\x58\x7e\x2f\xe2\xc3\xd9\x38\xf9\x35\xe1\x2e\x60\x8e\xd2\x52\xe8\x9b\xb6\xb4\x70\x6f\xc2\x21\xe4\x5d\xd9\x56\x23\xaf\x84\xa4\xb5\x93\x1e\xfe\xee\x45\x2b\xad\x57\xda\xd5\xda\xde\x24\xb4\x47\xb9\x0b\x84\xcb\x6a\xe6\x99\xd1\x33\x8f\x46\x7f\xb6\x58\x52\xbc\x60\x04\xd2\x9c\xf1\xaa\x50\x1a\xe7\x8f\xe8\x2f\x5e\x92\x14\xbe\x24\x00\xfa\x59\x10\x98\x83\xd2\x92\x96\xab\x64\x9f\x24\x51\x7b\x52\x16\x82\xd3\x52\x8f\xf1\xc1\x82\xa2\x47\xf2\x3c\xc6\x45\x91\x5c\x12\x8d\x70\x9e\x13\xa5\xce\x72\x2e\x89\xde\x71\xf9\x88\xb6\x22\x47\x7c\xb9\x24\xc6\xc2\x73\x02\x68\xfd\x00\x0a\xb2\xc4\x15\xd3\x30\x87\xf4\x47\xfb\xdf\x9f\x15\x67\x58\x93\xe2\x17\x0b\xf3\xab\x43\xf8\x89\xcb\x4f\x22\x77\x1f\x55\x1a\x86\x7c\x61\x28\xf8\xf4\xdb\x0f\x70\xf0\x1b\xa4\x20\xe7\x1b\x51\x69\x32\x2a\x82\x5a\x63\x49\x8a\x8c\x61\xb9\x22\x1d\x64\x52\x6e\x11\x2d\x4e\xd2\xa8\xd6\x5c\x6a\x74\xa6\xb1\x21\x20\xa7\x85\x3c\x27\xb5\xeb\x59\x56\xff\x5c\x5d\xdf\x75\x32\x2b\x4a\xd5\x05\x60\x54\xe9\x0b\x8b\x32\x09\x60\x1e\x12\x63\x90\xbe\xcf\xea\x9f\x74\x9a\x00\x7c\xee\x4c\x80\xe4\x95\x74\x92\x6e\xfd\x96\x98\x29\x12\x1a\x52\xc5\x91\x22\xab\x0d\x69\xc4\x1c\xb1\x66\x3c\xc7\x4c\xd9\x51\x2a\x49\xae\xb9\x44\x25\xde\xd4\x59\xda\x4c\xd3\x05\x57\xeb\xcb\xff\x7d\xd9\x62\x99\x59\xd6\xf6\x69\x02\x40\x4b\x4d\x64\x89\x59\x4d\x4f\x6b\x6d\xfe\x52\xd5\xa2\x24\xfa\xc2\x38\x34\xfc\x4d\xe1\xfd\x14\x66\x13\xdf\x6f\xb5\x03\x08\xfd\xd6\x5c\xe9\x8b\x3a\xa1\x2c\x40\x9f\xc2\xb5\xf1\xfc\xb3\xda\x88\x05\x7f\x42\x87\x31\x2a\x4e\x7b\xde\x4e\xfc\x99\xf9\xae\xa7\x3c\xef\x26\x86\x1f\x21\xf9\x96\x16\x44\xfa\xc2\xb5\x64\x9a\x35\x5f\x49\x66\xd3\x37\x73\x8d\xf4\x10\x67\xf6\x48\x9e\xa3\x66\x6e\x2c\x01\x70\xdd\xc0\x18\xf6\xac\x7a\x9d\xc2\x08\x89\x6e\x08\xaf\xb4\xab\xd0\x87\xd9\xac\x56\x9c\x24\x8a\x57\x32\x27\x90\x6a\xa6\x90\x90\x74\x8b\x35\xb1\xbd\xa5\xae\x22\xda\x6e\x9c\x10\x31\x5b\x71\x49\xf5\x7a\x63\xdc\x7f\xff\xe3\x7b\x53\x51\xa9\x30\x5a\x50\xad\x0c\xe4\x77\xb3\x0f\x77\x21\xa2\x9f\x90\x5a\x1b\x50\x81\xa9\xec\x01\x7b\xda\x99\x43\x1a\xa8\x06\x1d\x2c\x13\x00\x51\x2d\x18\xcd\xdd\x84\x3b\xd9\x66\x8d\x61\xd6\x5a\x21\x2e\x48\xa9\xd4\x7a\x30\xa9\xad\xc8\xd3\x7a\xbd\xf6\xf2\xe8\x67\x72\x69\xcc\x12\x00\x5f\xba\x8e\xf7\x46\xb0\x09\x80\xdf\xfc\xbc\xd1\xe6\x53\x02\x60\xb6\x96\x8e\x7f\x67\xe3\x19\x4c\xb7\x69\xe6\x38\x67\x29\xa4\x98\x31\xbe\x43\x98\xb1\x20\xf9\xb9\x3f\xe0\x12\xa2\x85\x11\x6e\x30\x6d\x93\x55\x46\x8b\x73\x42\x21\x59\x31\x92\x42\x4a\xcb\x95\x34\x62\xea\xc4\x35\x16\xdd\x00\x9e\x77\x76\x30\x37\xe1\x8c\x62\x2a\x46\x6a\x47\xe3\xaa\x29\x2f\x5b\xbe\x6b\xd3\xb4\x1e\x32\x74\x22\xd3\xef\xec\x90\x6d\x70\x00\x69\xd3\x2e\x67\x75\x93\x33\x6d\xce\xfc\x16\x92\x6b\x9e\x73\xe6\x01\x59\x18\xc1\xa5\xd1\x66\x13\xe1\xc1\x9a\x6b\x89\x97\x4b\x9a\x23\xd7\xc3\x9b\x99\x19\x97\xfd\x18\x46\xc8\x7f\x95\x10\x72\x3e\x1f\xcd\x62\xb6\xfd\xdb\x32\x10\x2c\x91\x33\x5b\x7c\xb0\xf6\x82\xf5\xe7\xef\xbd\xfb\xcb\x7a\x63\x71\xc1\x5a\x79\x07\xa1\xa2\x42\x37\x0d\x5d\x09\x86\x9f\x91\x26\x4f\x3a\xd8\xa6\x5a\xb4\xa6\x4c\x9d\x15\x1c\x3b\x44\x75\x57\xf2\xf0\x6a\x3e\x28\xa2\x6b\x68\xf7\x64\xf8\x08\x84\x11\xb3\xdf\x5e\x18\xea\x78\x99\x63\x7d\x31\x20\x1d\x8f\x69\xd3\xe1\xd1\x4a\xf2\x4a\x64\xef\x32\x5a\x4c\xe1\x21\x4d\x3f\x4f\x8c\x06\x66\xe6\xd7\x04\xee\xcf\xd2\xdf\xe9\xea\x9a\x03\x17\x65\xd8\x08\xf3\x35\x45\xbe\x1e\x53\x64\x2f\xe6\xdb\xd5\x3a\x0e\xfa\xad\xe4\xb1\x92\x97\x5a\x72\x86\x04\xc3\xcd\x35\x68\x4c\xb5\xef\x46\x57\xbb\x0e\x77\x69\xc3\xbd\x45\xa1\x3b\x78\x5f\x7b\x8d\x03\xbe\xff\xb1\x2a\x17\x58\xe3\x57\x94\xf8\x66\x4c\x89\x4d\xac\x37\xab\x6f\x08\xf6\xb5\x17\xb7\xa5\xf9\x5f\xa8\x2c\xb2\x87\x61\x57\x60\x5e\x95\xba\x3f\x77\xef\xc6\x07\x1f\xe1\x1a\xee\x61\x36\x5e\x0d\xff\x7f\x99\x1a\x2e\x5d\x7e\x6f\x29\x0a\x0f\xf3\x9b\x36\x9c\x03\x15\xb8\x28\xea\x33\x1d\xa4\xcd\x95\x98\x50\x61\x75\x71\xe2\x8a\x70\x20\x66\xf0\xb2\xc2\x2b\x2d\x2a\x1d\x04\x74\xaf\x06\xf5\x2d\xcc\xc8\xc2\x45\xc2\xac\x22\xc7\xee\x78\x1e\x58\x70\x13\x6d\x9d\x2d\xdd\xc3\x97\xbf\xf6\x23\x12\x64\x53\xdf\x92\x4b\x45\x35\xdd\x9a\xb8\x5a\x56\x41\xc2\xe4\xe9\x70\xb5\x0f\x13\x8c\x51\x97\x79\xc4\x65\x54\x20\xf7\xd9\xc7\x6b\x2c\x2a\xc9\x7a\x13\x1e\x01\xb9\xbf\xbf\xb9\x09\xb8\x38\xbc\x45\x1c\xaa\x18\x80\xaf\xb5\x16\xea\xfe\xea\x6a\x6c\x90\xdb\xdb\xdb\xdb\x20\x4e\xa3\xab\xc1\x8a\x1d\x39\x8b\xc7\xd2\xed\xe3\xd8\x57\x93\xc0\xc0\xf7\x0c\x9e\x53\x62\x9e\x81\x41\xd4\x73\xb5\x3b\xea\xb7\xda\xc5\x0a\xe6\x3f\xf2\xc4\xdc\x23\xcf\x48\xd1\x09\x9f\xc2\x89\x3d\x2a\x0d\xac\xa0\xf8\x43\x67\x03\xd7\x59\x89\x5d\xe3\x01\xcc\xf6\x59\x7b\x00\xe7\xc8\x8a\x0e\x9f\xb8\x07\xfc\x0f\x6f\x58\x3e\x39\x65\x47\xaf\xf6\xee\x6a\x3c\x8b\x52\x1d\xde\x2a\x7b\x85\x74\x87\xde\xfa\xe2\xbb\xc1\x42\xf4\x38\xb0\x77\xe6\x48\x6f\xf5\xfa\x6a\x66\x14\x36\x89\xef\x29\x11\xeb\x7a\x3f\x1b\x84\x0d\xce\x69\x3e\x72\x14\x36\xb4\x3e\x8e\xec\x9d\xf2\xc3\x8c\xa3\xc8\xbe\xb5\x87\xdb\x6c\x3b\x83\x7b\x4e\xd6\x3b\x18\x64\xef\xea\x70\xd3\xf6\x3d\xc1\xec\x3a\x30\x9b\x4c\xe0\xe4\xbf\x39\xbc\x2c\xa0\x3d\x33\x74\x03\x1e\x63\xbd\x7b\x01\x75\x14\x0d\xb0\xde\xb3\x6e\x28\xda\x1f\x93\xd9\x6a\xf7\x66\x22\x3b\xca\xd9\x71\xa0\x15\xd6\x64\x87\x9f\x5f\x20\xc1\xb1\x41\x43\xa0\x93\x71\x07\x05\x3a\x36\xae\x0f\x14\x46\x7d\x95\x7c\x5b\xdd\xce\xfd\xe3\xd7\x91\x03\x58\x14\xad\xc9\xa8\x3d\x7e\xb9\x03\x18\xc0\x4b\x14\x3a\xbe\x28\x3d\x20\x8f\x23\xa3\xdf\xbf\x03\x00\x00\xff\xff\x98\x36\xc9\x88\xae\x1c\x00\x00")

func templatesBaseTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesBaseTf,
		"templates/base.tf",
	)
}

func templatesBaseTf() (*asset, error) {
	bytes, err := templatesBaseTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/base.tf", size: 7342, mode: os.FileMode(420), modTime: time.Unix(1623186950, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSec_groupTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x98\x6f\x4f\xdb\x3e\x10\xc7\x9f\xe7\x55\x9c\xf2\xe8\xf7\x93\xb6\xce\xf9\xc7\xdc\x49\xd5\x5e\x08\x42\x96\x71\x5c\x88\x30\x71\x64\x3b\x65\xd3\xc4\x7b\x9f\x9c\x38\x69\x0b\xce\xc4\x1f\xb7\x4d\x0b\x02\x2c\x3b\xdc\xf7\xee\x73\xd7\x3b\xb7\x1b\xaa\x2a\x7a\x2b\x38\xc4\x6c\x4d\xf8\x2f\xc3\x55\x4d\x05\x69\xa4\x32\x3a\x86\x3f\x11\x80\xf9\xdd\x70\x58\x81\xa8\xb4\xf9\x4f\x1b\x55\xd5\x77\xff\x47\x00\x25\x5f\xd3\x56\x18\x58\xc1\x75\x04\x00\x80\xd1\x97\xee\x6f\x9e\x67\xfd\x22\x4d\xd3\x74\xd8\xea\xf7\x6e\xa2\xe7\x28\xda\xca\xdd\x4a\x7d\xff\x7e\x9d\xc1\xe8\x15\xbe\xc2\x4e\xa8\x28\x0a\x27\x34\x4a\xa6\x45\x5a\xa0\x29\xcd\x8f\x07\xe9\x17\x77\xea\x59\x86\x97\xfd\x0a\xe3\x3c\x77\x2b\x7f\xe8\xfa\x9e\x2a\x5e\x12\xc3\x9a\xf7\xfb\x90\x60\x94\x38\x41\x84\x1c\xf4\x2c\x2f\xbe\x3b\x04\x08\x39\xfe\x79\x32\xae\x5e\x65\xc2\xa6\x6b\x48\x18\x46\xd8\x9d\xe2\x6c\xb0\x87\xb3\x41\x03\x67\x28\xdd\x0f\x65\x2f\x3c\x5c\x8c\x7b\xdb\xe0\x97\xee\x7f\x97\x68\xd0\x5d\xa2\x34\x1b\x56\x4b\x34\xae\x92\x69\x34\x6d\xf9\x01\x34\x5e\xb7\xaf\xd0\xb6\x10\x14\xd7\xb2\x55\xcc\xd6\xba\x90\x6d\xa9\x0d\x65\x0f\xa4\xe6\xe6\x49\xaa\x07\x42\x99\x88\x5d\x85\xe8\xf6\xb6\xe6\x86\x68\xce\xc8\x9d\x92\x6d\xd3\x3b\xc1\x64\x5b\x1b\x80\x15\x6c\xa8\x5a\x68\xce\x5a\xc5\xe1\x27\x24\xf0\x03\x50\x04\x50\xd3\x47\x0e\xf6\x74\xd7\x44\x1c\x01\x6c\x1a\x46\xaa\x12\x56\xb0\xa3\xb9\x69\xd8\xc2\xfe\x54\xe5\x5b\xdc\x22\xaa\x15\x7c\xca\x37\xc2\xef\x14\xd7\xfa\x2d\x2e\x5a\x53\x2f\x3d\xd9\x91\x59\x78\xed\x5f\xa3\x1b\xeb\x66\x04\x60\xbd\xe8\x54\xac\x25\x53\xc9\xda\x06\x4b\x85\x90\x4f\x71\xb7\xc9\xaa\x52\x11\x9b\xa2\x31\x21\x00\x31\x5a\x74\xdf\xdf\x50\xdc\xe7\xe3\xa6\xfb\xdd\x28\x69\x24\x93\xa2\x7b\xa6\xb7\xd2\xdb\xe8\x72\x0e\xee\x6b\x05\xd7\xfd\xe3\x46\xd1\xf5\xba\x62\xc4\x95\x41\xec\x42\x8e\x00\x9e\x3f\xcf\xaf\x2d\xdf\x94\xdf\xf9\xc2\xb3\x01\xbc\x03\x5e\x55\x87\xa4\x37\x34\xd3\xf3\x46\x68\x98\x1f\xa1\x0d\xc3\x33\x33\x8e\xc0\xb5\x62\x8f\x67\x5e\x96\x5d\x04\xdd\x89\x5d\xf5\x98\xba\x93\xaf\xc9\x76\x97\xc9\x72\x7f\xf7\x30\x35\x1c\x43\xcc\x64\x6d\x94\x14\xa4\x11\xb4\xe6\x1f\x6d\xed\x7b\x46\xc2\x36\xf7\x09\xff\x02\xb6\xf7\x09\x85\x0b\x6a\xf0\x53\x0c\xed\x8b\x60\xb6\x04\xad\x27\xb6\x8c\xec\xd9\xa7\x7a\x54\xf8\xd6\x34\xc5\xd3\x7f\x7f\xbd\x50\xb6\x2f\x83\x3d\x26\xe1\x17\xd7\xe0\x33\x26\x3c\x75\x49\xd9\x21\x3c\x06\x7b\x14\xc2\xa1\x06\xec\x29\xbb\xea\xcc\x46\x6c\x49\x0d\xfd\xdc\x7c\xdd\x5a\x08\x3b\x5c\x7d\x9e\x05\x9c\xac\x3e\xf3\x17\x34\x56\xbd\xf4\x42\xcd\xd4\xf0\xec\x66\x3c\x50\xbd\x24\x0f\x31\x4d\xe7\x49\xf5\xa0\xa3\xf4\x5f\x6c\x83\xce\xd1\xd3\xb1\x3d\xd9\x10\xf5\xf7\xcf\x80\x6f\xfd\x67\xd7\x41\x6d\x14\xaf\x3e\x10\x3f\x3c\xd3\x50\xb7\x92\x93\xf1\x3c\xe6\x95\xe4\x6f\x00\x00\x00\xff\xff\x31\x07\xe4\x48\xbb\x18\x00\x00")

func templatesSec_groupTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesSec_groupTf,
		"templates/sec_group.tf",
	)
}

func templatesSec_groupTf() (*asset, error) {
	bytes, err := templatesSec_groupTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/sec_group.tf", size: 6331, mode: os.FileMode(420), modTime: time.Unix(1623183082, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/base.tf":      templatesBaseTf,
	"templates/sec_group.tf": templatesSec_groupTf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"base.tf":      &bintree{templatesBaseTf, map[string]*bintree{}},
		"sec_group.tf": &bintree{templatesSec_groupTf, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
