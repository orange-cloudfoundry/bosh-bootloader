// Code generated by go-bindata.
// sources:
// templates/base.tf
// templates/sec_group.tf
// DO NOT EDIT!

package cloudstack

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesBaseTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x51\x6b\xe4\xb6\x13\x7f\xf7\xa7\x18\xcc\xff\x21\x7b\x24\xce\x26\xff\x26\xdc\x05\xc2\x51\x5a\x0a\x7d\x69\x4b\x0b\xf7\x12\x0e\xa1\xb5\xb5\xbb\x6a\xb4\x96\x90\xe4\xdd\xa4\xc7\x7e\xf7\x22\x4b\xf6\x4a\xb6\xbc\x6b\x27\xa1\x3d\xca\x65\x21\xc9\xda\x33\xbf\x19\xcd\xfc\x34\xd2\xcc\x16\x4b\x8a\x17\x8c\x40\x9a\x33\x5e\x15\x4a\xe3\xfc\x11\xfd\xc5\x4b\x92\xc2\x97\x04\x40\x3f\x0b\x02\xf7\xa0\xb4\xa4\xe5\x2a\xd9\x27\x49\x54\x9e\x94\x85\xe0\xb4\xd4\x53\x74\xb0\xa0\xe8\x91\x3c\x4f\x51\x51\x24\x97\x44\x23\x9c\xe7\x44\xa9\x51\xca\x25\xd1\x3b\x2e\x1f\xd1\x56\xe4\x88\x2f\x97\xc4\x48\x78\x4a\x00\x07\x3d\x80\x82\x2c\x71\xc5\x34\xdc\x43\xfa\xa3\xfd\xf7\x67\xc5\x19\xd6\xa4\xf8\xc5\xc2\xfc\xea\x10\x7e\xe2\xf2\x93\xc8\xdd\x43\x95\x86\x26\x5f\x68\x0a\x3e\xfd\xf6\x03\xb4\x7a\x83\x21\xc8\xf9\x46\x54\x9a\x4c\xb2\xa0\xd6\x58\x92\x22\x63\x58\xae\x48\x07\x99\x94\x5b\x44\x8b\x93\x61\x54\x6b\x2e\x35\x1a\x29\x6c\x02\x90\xd3\x42\x8e\x71\xed\x6a\x9e\xd5\x9f\xcb\xab\xdb\x8e\x67\x45\xa9\x02\x4b\x8c\x2a\x7d\x66\x21\x66\x01\xc6\x43\x62\xe0\xd3\xf7\x59\xfd\x49\xcf\x13\x80\xcf\x1d\xef\x49\x5e\x49\xc7\xe7\x83\xde\x12\x33\x45\x42\x41\xaa\x38\x52\x64\xb5\x21\x0d\x93\x23\xd2\x8c\xe7\x98\x29\xfb\x96\x4a\x92\x6b\x2e\x51\x89\x37\xf5\x1a\xed\x3a\xd3\x05\x57\xeb\x8b\xff\x7d\xd9\x62\x99\xd9\x90\xed\xd3\x04\x80\x96\x9a\xc8\x12\xb3\x3a\x36\x07\x69\xf3\x4d\x55\x8b\x92\xe8\x33\xa3\xd0\x04\xef\x1c\xde\x9f\xc3\x7c\xe6\xeb\xad\x76\x00\xa1\xde\x9a\x2b\x7d\x56\x3b\x94\x05\xe8\xe7\x70\x65\x34\xff\xac\x36\x62\xc1\x9f\x50\xfb\x8e\x8a\xd3\x9a\x37\x33\x7f\x65\xbe\xea\x29\xcd\xdb\x99\x89\x8f\x90\x7c\x4b\x0b\x22\x7d\xd6\xda\x60\x9a\x0d\x5f\x49\x66\xdd\x37\x6b\x8d\x14\x10\x27\xf6\x48\x9e\xa3\x62\xee\x5d\x02\xe0\x4a\x81\x11\xec\x49\xf5\xca\x84\x61\x11\xdd\x10\x5e\x69\x97\xa1\x0f\xf3\x79\x4d\x37\x49\x14\xaf\x64\x4e\x20\xd5\x4c\x21\x21\xe9\x16\x6b\x62\x0b\x4b\x9d\x45\xb4\xdd\x38\x16\x62\xb6\xe2\x92\xea\xf5\xc6\xa8\xff\xfe\xc7\xf7\x26\xa3\x52\x61\xb4\xa0\x5a\x19\xc8\xef\xe6\x1f\x6e\x43\x44\xdf\x21\xb5\x36\xa0\x02\x53\xd9\x03\xf6\xb8\x73\x0f\x69\xc0\x1a\xd4\x4a\x26\x00\xa2\x5a\x30\x9a\xbb\x05\x77\xbc\xcd\x1a\xc1\xec\x20\x85\xb8\x20\xa5\x52\xeb\x41\xa7\xb6\x22\x4f\xeb\xcd\xda\xf3\xa3\xef\xc9\x85\x11\x4b\x00\x7c\xea\xba\xb8\x37\x84\x4d\x00\xfc\xca\xe7\xbd\x6d\x1e\x25\x00\xe6\x5c\xe9\xe8\x77\x4e\x9d\x41\x77\x9b\x4a\x8e\x73\x96\x42\x8a\x19\xe3\x3b\x84\x19\x0b\x9c\xbf\xf7\x5f\x38\x87\x68\x61\x88\x1b\x2c\xdb\x78\x95\xd1\x62\x8c\x29\x24\x2b\x46\x52\x48\x69\xb9\x92\x86\x4c\x1d\xbb\x46\xa2\x6b\xc0\xd3\xce\x5a\x71\x63\xce\x30\xa6\x62\xa4\x56\x34\xaa\x9a\xf2\xb2\x75\x39\xad\x1f\x9a\x40\x22\x53\xe9\xda\xba\x06\x90\x36\x25\x72\x5e\xd7\x36\x53\xdd\xcc\x6f\x21\xb9\xe6\x39\x67\x4d\xbe\xdc\x92\x01\x04\x97\x86\x92\x4d\x8c\x1f\xac\xb8\x96\x78\xb9\xa4\x39\x72\xd5\xb4\x59\x90\x51\xd9\x4f\x09\x04\xf9\x8f\xc5\x81\x8c\x0f\x43\xb3\x75\x6d\xb5\xb6\x0b\x0f\x36\xc4\xc8\x82\x1e\xec\xb4\x60\xb7\xf9\xc7\xec\xfe\xa2\x3e\x46\x9c\xb1\x03\x99\x03\x53\x51\x5a\x9b\xf2\xad\x04\xc3\xcf\x48\x93\x27\x1d\x1c\x4a\x07\xb4\x26\x3b\x9d\xfd\x1a\xbb\x2f\x75\xf7\xed\xf0\xde\xf5\x88\x50\x2f\xa7\x3e\x77\xe1\x23\x10\x46\xcc\x99\x7a\x66\x73\xcb\xcb\x1c\xeb\xb3\x01\xa6\x78\x11\x36\x75\x1c\xad\x24\xaf\x44\xf6\x2e\xa3\xc5\x39\x3c\xa4\xe9\xe7\x99\xcd\xfd\xdc\xfc\x99\xc1\xdd\x28\xc2\x9d\xce\xab\xb9\x55\x51\x86\x0d\x13\x5f\x93\xde\xab\x29\xe9\xf5\x6c\xbe\x5d\x96\xe3\xa0\xdf\x92\x1d\x26\xbb\xd4\x92\x33\x24\x18\x6e\xba\x9c\x29\x79\xbe\x9d\x9c\xe7\xda\xdc\x85\x35\xf7\x16\x29\xee\xe0\x7d\xad\xd9\x0d\xe2\xfc\x0f\xe6\xb7\xc0\x1a\xbf\x22\xb9\xd7\x53\x92\x6b\x6c\xbd\x59\x66\x43\xb0\xaf\x35\xad\x87\xf0\xfe\x2b\x39\x45\xf6\x8a\xeb\x52\xcb\xab\x52\xf7\x57\xed\xf5\x71\xf0\x11\xae\xe0\x0e\xe6\xd3\x79\xf0\xff\x97\xf1\xe0\xc2\xf9\xf7\x96\x74\xf0\x30\xbf\xb1\x02\x51\x81\x8b\xa2\xbe\xb5\x41\xda\xb4\xb8\x84\x0a\xcb\x88\x13\x57\xfe\x36\x24\x83\xcd\x07\xaf\xb4\xa8\x74\x60\xd0\x4d\x01\xea\xae\xca\x10\xc2\x59\xc2\xac\x22\xc7\x7a\x36\x0f\x2c\xe8\x2c\x0f\xca\x36\x23\xc3\xcd\xdc\xe1\x21\x12\x64\x53\x77\xbd\xa5\xa2\x9a\x6e\x8d\x5d\x2d\xab\xc0\x61\xf2\xd4\xb6\xea\xa1\x83\xb1\xd0\x65\x5e\xe0\x32\x2a\x90\x7b\xec\xe3\x35\x12\x95\x64\xbd\x05\x4f\x80\xdc\xdf\x5d\x5f\x07\xb1\x68\x67\x0b\x6d\x16\x03\xf0\xb5\xd6\x42\xdd\x5d\x5e\x4e\x35\x72\x73\x73\x73\x13\xd8\x69\x78\x35\x98\xb1\x23\xb7\xed\x98\xbb\x7d\x1c\x3b\x05\x09\x04\x7c\xcd\x60\x3c\x12\xd3\x0c\x04\xa2\x9a\xab\xdd\x51\xbd\xd5\x2e\x96\x30\x7f\x68\x13\x53\x8f\x8c\x85\xa2\x0b\x3e\x85\x13\x1b\x12\x0d\xec\xa0\xf8\xd4\xb2\x81\xeb\xec\xc4\xae\xf0\x00\xe6\x61\x46\x3d\x80\x73\x64\x47\x87\xf3\xea\x01\xfd\x76\x26\xe5\x07\xa7\xec\xf0\xd5\x76\xa7\x46\xb3\x28\x55\x3b\x7b\xec\x25\xd2\x5d\x72\xeb\xbe\x76\x83\x85\xe8\xc5\xc0\x36\xc3\xfd\xb2\xe8\x15\xd6\xac\x77\x18\x0d\xfc\xc4\xda\x70\x1f\xc7\x8d\x6b\xa2\xe6\x82\x4b\xdb\x38\x8b\x51\x73\x21\xce\x31\x8b\x5e\x13\x30\x76\x85\x51\x8b\x3e\x4e\x6b\xaf\x39\xc1\x06\x0f\xaf\xac\x77\xb3\xc8\xde\xd5\x6e\x34\xe7\x16\xcc\x67\x70\xff\x42\x1c\x7b\x97\x68\x71\x86\x63\xde\xed\x3e\x4f\x06\x62\x20\xe6\x3d\x1c\x17\x88\xfd\x31\x52\xae\x76\xaf\xa7\xe4\x29\xca\xad\xb0\x26\x3b\xfc\x3c\x81\x75\x23\x58\x75\x02\x34\x42\xac\x93\xc4\xf1\x21\xdf\x9a\x3b\x6e\x8e\x35\x0d\xce\x39\x14\xdc\xa2\xdc\x3d\x0a\x60\x32\xa3\xc6\xd2\xe6\x10\x86\x9a\x39\x7f\x07\x00\x00\xff\xff\xb1\x03\xb7\x2a\x24\x1c\x00\x00")

func templatesBaseTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesBaseTf,
		"templates/base.tf",
	)
}

func templatesBaseTf() (*asset, error) {
	bytes, err := templatesBaseTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/base.tf", size: 7204, mode: os.FileMode(420), modTime: time.Unix(1623183082, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSec_groupTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x98\x6f\x4f\xdb\x3e\x10\xc7\x9f\xe7\x55\x9c\xf2\xe8\xf7\x93\xb6\xce\xf9\xc7\xdc\x49\xd5\x5e\x08\x42\x96\x71\x5c\x88\x30\x71\x64\x3b\x65\xd3\xc4\x7b\x9f\x9c\x38\x69\x0b\xce\xc4\x1f\xb7\x4d\x0b\x02\x2c\x3b\xdc\xf7\xee\x73\xd7\x3b\xb7\x1b\xaa\x2a\x7a\x2b\x38\xc4\x6c\x4d\xf8\x2f\xc3\x55\x4d\x05\x69\xa4\x32\x3a\x86\x3f\x11\x80\xf9\xdd\x70\x58\x81\xa8\xb4\xf9\x4f\x1b\x55\xd5\x77\xff\x47\x00\x25\x5f\xd3\x56\x18\x58\xc1\x75\x04\x00\x80\xd1\x97\xee\x6f\x9e\x67\xfd\x22\x4d\xd3\x74\xd8\xea\xf7\x6e\xa2\xe7\x28\xda\xca\xdd\x4a\x7d\xff\x7e\x9d\xc1\xe8\x15\xbe\xc2\x4e\xa8\x28\x0a\x27\x34\x4a\xa6\x45\x5a\xa0\x29\xcd\x8f\x07\xe9\x17\x77\xea\x59\x86\x97\xfd\x0a\xe3\x3c\x77\x2b\x7f\xe8\xfa\x9e\x2a\x5e\x12\xc3\x9a\xf7\xfb\x90\x60\x94\x38\x41\x84\x1c\xf4\x2c\x2f\xbe\x3b\x04\x08\x39\xfe\x79\x32\xae\x5e\x65\xc2\xa6\x6b\x48\x18\x46\xd8\x9d\xe2\x6c\xb0\x87\xb3\x41\x03\x67\x28\xdd\x0f\x65\x2f\x3c\x5c\x8c\x7b\xdb\xe0\x97\xee\x7f\x97\x68\xd0\x5d\xa2\x34\x1b\x56\x4b\x34\xae\x92\x69\x34\x6d\xf9\x01\x34\x5e\xb7\xaf\xd0\xb6\x10\x14\xd7\xb2\x55\xcc\xd6\xba\x90\x6d\xa9\x0d\x65\x0f\xa4\xe6\xe6\x49\xaa\x07\x42\x99\x88\x5d\x85\xe8\xf6\xb6\xe6\x86\x68\xce\xc8\x9d\x92\x6d\xd3\x3b\xc1\x64\x5b\x1b\x80\x15\x6c\xa8\x5a\x68\xce\x5a\xc5\xe1\x27\x24\xf0\x03\x50\x04\x50\xd3\x47\x0e\xf6\x74\xd7\x44\x1c\x01\x6c\x1a\x46\xaa\x12\x56\xb0\xa3\xb9\x69\xd8\xc2\xfe\x54\xe5\x5b\xdc\x22\xaa\x15\x7c\xca\x37\xc2\xef\x14\xd7\xfa\x2d\x2e\x5a\x53\x2f\x3d\xd9\x91\x59\x78\xed\x5f\xa3\x1b\xeb\x66\x04\x60\xbd\xe8\x54\xac\x25\x53\xc9\xda\x06\x4b\x85\x90\x4f\x71\xb7\xc9\xaa\x52\x11\x9b\xa2\x31\x21\x00\x31\x5a\x74\xdf\xdf\x50\xdc\xe7\xe3\xa6\xfb\xdd\x28\x69\x24\x93\xa2\x7b\xa6\xb7\xd2\xdb\xe8\x72\x0e\xee\x6b\x05\xd7\xfd\xe3\x46\xd1\xf5\xba\x62\xc4\x95\x41\xec\x42\x8e\x00\x9e\x3f\xcf\xaf\x2d\xdf\x94\xdf\xf9\xc2\xb3\x01\xbc\x03\x5e\x55\x87\xa4\x37\x34\xd3\xf3\x46\x68\x98\x1f\xa1\x0d\xc3\x33\x33\x8e\xc0\xb5\x62\x8f\x67\x5e\x96\x5d\x04\xdd\x89\x5d\xf5\x98\xba\x93\xaf\xc9\x76\x97\xc9\x72\x7f\xf7\x30\x35\x1c\x43\xcc\x64\x6d\x94\x14\xa4\x11\xb4\xe6\x1f\x6d\xed\x7b\x46\xc2\x36\xf7\x09\xff\x02\xb6\xf7\x09\x85\x0b\x6a\xf0\x53\x0c\xed\x8b\x60\xb6\x04\xad\x27\xb6\x8c\xec\xd9\xa7\x7a\x54\xf8\xd6\x34\xc5\xd3\x7f\x7f\xbd\x50\xb6\x2f\x83\x3d\x26\xe1\x17\xd7\xe0\x33\x26\x3c\x75\x49\xd9\x21\x3c\x06\x7b\x14\xc2\xa1\x06\xec\x29\xbb\xea\xcc\x46\x6c\x49\x0d\xfd\xdc\x7c\xdd\x5a\x08\x3b\x5c\x7d\x9e\x05\x9c\xac\x3e\xf3\x17\x34\x56\xbd\xf4\x42\xcd\xd4\xf0\xec\x66\x3c\x50\xbd\x24\x0f\x31\x4d\xe7\x49\xf5\xa0\xa3\xf4\x5f\x6c\x83\xce\xd1\xd3\xb1\x3d\xd9\x10\xf5\xf7\xcf\x80\x6f\xfd\x67\xd7\x41\x6d\x14\xaf\x3e\x10\x3f\x3c\xd3\x50\xb7\x92\x93\xf1\x3c\xe6\x95\xe4\x6f\x00\x00\x00\xff\xff\x31\x07\xe4\x48\xbb\x18\x00\x00")

func templatesSec_groupTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesSec_groupTf,
		"templates/sec_group.tf",
	)
}

func templatesSec_groupTf() (*asset, error) {
	bytes, err := templatesSec_groupTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/sec_group.tf", size: 6331, mode: os.FileMode(420), modTime: time.Unix(1623183082, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/base.tf":      templatesBaseTf,
	"templates/sec_group.tf": templatesSec_groupTf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"base.tf":      &bintree{templatesBaseTf, map[string]*bintree{}},
		"sec_group.tf": &bintree{templatesSec_groupTf, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
