// Code generated by go-bindata.
// sources:
// templates/base.tf
// templates/sec_group.tf
// DO NOT EDIT!

package cloudstack

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesBaseTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x5b\x6b\x23\x37\x14\x7e\xf7\xaf\x38\x0c\xfb\xe0\x2c\xce\xc4\x49\x9b\xb0\x1b\x58\x96\xd2\x52\xe8\x4b\x5b\x5a\xd8\x97\x65\x11\xf2\x8c\x3c\x56\x23\x8f\x84\xa4\xb1\x93\x06\xff\xf7\xa2\xcb\x5c\x34\xd6\xd8\xe3\xa4\x6d\x42\xbb\xf8\xc5\x68\xce\xf7\x9d\xa3\xf3\x1d\x1d\x5d\x36\x58\x52\xbc\x60\x04\x92\x8c\xf1\x2a\x57\x1a\x67\x77\xe8\x4f\x5e\x92\x04\x1e\x27\x00\xfa\x41\x10\xf8\x00\x89\xd2\x92\x96\x45\x32\xd9\x4d\x26\x51\x04\x29\x73\xc1\x69\xa9\x4f\x43\x61\x41\xd1\x1d\x79\x38\x0d\xa4\x48\x26\x89\x46\x38\xcb\x88\x52\x23\xe1\x25\xd1\x5b\x2e\xef\xd0\x46\x64\x88\x2f\x97\xc4\x9a\x44\x61\x00\x39\x59\xe2\x8a\x69\x33\xf8\x83\xfb\xfb\x93\xe2\x0c\x6b\x92\xff\xec\x58\x7e\xf1\x04\x3f\x72\xf9\x49\x64\x7e\x50\xf5\x3c\x3e\xcd\x13\x7c\xfa\xf5\x7b\x68\x60\x83\x29\xc8\xf8\x5a\x54\x9a\x9c\xe2\x40\xad\xb0\x24\x79\xca\xb0\x2c\x48\x8f\x98\x94\x1b\x44\xf3\x11\x59\x54\x2b\x2e\x35\x1a\x6d\x6e\x52\x90\xd1\x5c\x8e\x88\xee\x72\x9e\xda\xdf\xc5\xe5\x4d\x8f\x24\x2f\x55\x88\x67\x54\xe9\x10\xfd\x79\x02\x00\x90\xbc\x4b\xed\x2f\xf9\xd2\x0b\x9a\x64\x95\xf4\xd5\xdc\x62\x96\x98\x29\x12\x1a\x52\xc5\x91\x22\xc5\x9a\xd4\x55\x1c\xb1\x66\x3c\xc3\x4c\xb9\xaf\x54\x92\x4c\x73\x89\x4a\xbc\xb6\x81\x2d\xb8\x5a\x9d\xbf\x79\xdc\x60\x99\xba\x14\xed\x4c\x98\xb4\xd4\x44\x96\x98\xd9\x4c\x18\xb3\x37\x8f\xe6\x9f\xaa\x16\x25\xd1\x53\x63\x5c\xa7\x69\x06\xef\x66\x30\x3f\x0b\x51\xc5\xb6\xc5\xac\xb8\xd2\x53\x1b\x41\x1a\xb0\xce\xe0\xd2\xa1\xfe\xa8\xd6\x62\xc1\xef\x51\xf3\x95\x8a\x31\xe8\x6b\x87\x6e\x26\x74\x22\xfc\xc6\xc0\x77\x93\x89\x90\x7c\x43\x73\x22\xbb\x95\xea\x12\x69\x96\x79\x25\x99\x23\x33\x53\x8e\x34\x0e\x1b\x82\xef\x07\x51\x43\xff\xcd\xda\xf9\x16\x30\x64\xba\xd7\x21\x2c\x48\xd3\x35\xe1\x95\x2d\xb7\xf7\xf3\xb9\x0d\x59\x12\xc5\x2b\x99\x11\x48\x34\x53\x48\x48\xba\xc1\x9a\xb8\x96\x62\xe5\x44\x9b\xb5\xaf\x3e\xcc\x0a\x2e\xa9\x5e\xad\x0d\xfc\xb7\xdf\xbf\x33\x84\x52\x61\xb4\xa0\x5a\xc1\x07\xf8\x76\xfe\xfe\x26\x24\xec\x86\xa3\x56\x86\x53\x60\x2a\xf7\x78\xeb\xe2\x09\xea\x06\x35\x36\x13\x00\x51\x2d\x18\xcd\xda\xb9\xf6\x22\x4d\x6b\xdb\xb4\x35\x44\x5c\x90\x52\xa9\xd5\x2e\x19\x8c\x69\x23\xb2\xc4\xae\xd0\x03\x61\x9c\x9b\xcf\x13\x80\xb6\x72\xbb\xe5\x6a\x73\xda\xed\x72\xa1\x49\x3d\x6a\xcd\xcc\x7e\x12\x55\xca\x7c\x38\x10\x65\xdd\xb6\x71\xc6\x12\x48\x30\x63\x7c\x8b\x30\x63\x61\xcc\xed\xb0\x0f\x88\xe6\xbe\x6c\x83\xe9\x9a\xa8\x52\xbb\x28\x47\x78\x43\xb2\x62\x24\x81\x84\x96\x85\x34\x35\xd4\x73\x6d\x2c\x22\x5e\x3a\x04\x69\x83\x70\x3e\x4d\xb9\x54\x8c\x58\xb4\xc1\x6b\xca\xcb\x26\xf8\xc4\x0e\x9a\xa4\x22\xd3\xdd\x9a\x96\x06\x90\xd4\x7d\x71\x9e\x7c\xb1\x43\x42\x72\xcd\x33\xce\x3c\xd6\x21\x05\x97\xb6\x0a\x3f\x3b\x1b\x2d\xf1\x72\x49\x33\x54\x77\x4c\x3f\x09\x63\xbb\x3b\x65\xf2\xe4\x3f\x30\x77\x32\x7e\xea\xf5\xda\x74\xad\xd9\x4d\xf6\xa4\xa6\x1d\x2e\xa2\xee\x66\xb9\x3b\xb7\x9b\x83\x67\x1e\x59\xa6\xa6\x23\x2b\xc1\xf0\x03\xd2\xe4\x5e\x37\x3b\x4c\x4b\x52\xa7\x7c\x7f\x01\xc6\x8e\x3b\xa3\x16\x62\x28\xaf\x9d\x86\xdd\x3e\xe1\x23\x10\x46\xcc\xd6\x38\xcd\x78\x99\x61\x3d\x1d\x90\xbe\x93\x41\xd3\x86\x51\x21\x79\x25\xd2\xb7\x29\xcd\x67\x60\xf4\x9d\x26\xc9\xd9\x99\xc9\x18\xdc\xc2\xb8\xea\x39\xae\x9a\x39\x0d\x51\x86\x4d\x59\x3d\x41\xbc\xcb\xe3\xe2\x75\x1c\x3c\x5b\xc3\x38\xd7\x57\x29\x6b\x29\x4b\x2d\x39\x43\x82\xe1\xfa\x06\x32\x42\xc5\x9b\x91\x2a\x5a\xee\x73\xc7\xfd\x0c\x01\x7b\x34\xaf\x51\xbb\x20\x8f\xff\x9a\x7a\x39\xd6\xf8\x74\xe9\xae\x8e\x4b\x67\x88\x9f\xab\x5b\xc8\xf1\x1a\x45\x6b\xd3\xf7\x02\x8a\x21\x77\x7c\xf4\xc2\xf1\xaa\xd4\xed\x3c\x3a\x37\x23\xf8\x08\x97\x70\x0b\xf3\x5d\x32\x5a\xdf\x6f\x4e\xd1\xf7\xdc\x87\xf1\x37\xc8\xdc\xa1\xfa\xbf\xa8\x1d\x97\x9b\x0a\x9c\xe7\xf6\x18\x04\x49\x7d\x45\x24\x54\x38\xa9\xc7\x65\x79\xc4\x01\x9e\x57\x5a\x54\x3a\x70\xec\x2f\xd0\xf6\x4a\x62\xe4\xf7\x1e\x31\xab\x0e\xde\x79\x3a\x64\xc1\x95\xac\x07\x1e\xbe\x08\xb5\x83\x48\x90\xb5\xbf\x31\x96\x8a\x6a\xba\x31\x58\x2d\x2b\xd2\x75\x42\xee\x9b\xfb\xee\x9e\x93\x58\x1a\xd3\x4e\x12\x53\x2a\x90\x1f\x0e\xd3\x50\xdb\x54\x92\x3d\x8b\xf4\xf6\xea\x2a\xe0\x6d\x6e\xe9\x8d\xa6\x01\xf9\x4a\x6b\xa1\x6e\x2f\x2e\x4e\x75\x72\x7d\x7d\x7d\x1d\xf8\xa9\x0b\x6d\x50\xb7\x03\xe7\xdb\x58\xb8\x51\x1e\xf7\x9e\x10\xd8\x84\x59\x0c\x9e\x1a\x06\xe0\x81\xcd\x00\xbc\xd8\x1e\x03\x17\xdb\xb8\x7e\xdd\xd7\x90\x01\x8e\xc8\xb3\xcb\x2e\x9e\x84\x11\x64\xb1\x57\x98\xc1\x05\x16\x7f\x07\xec\x09\x75\xc0\x7e\x90\xb8\x7d\x00\x1e\x26\x3b\xb8\xf4\xc3\xf7\xe0\x61\x92\xce\xf3\x4f\x37\x61\x65\xaf\xae\xfd\x13\x9f\x83\xe7\xa5\xda\xb9\x57\xbe\x3d\x9d\xfd\x71\xd5\x5e\x27\xd7\x58\x88\x58\x4e\x2c\xd5\x1a\x8b\x69\x7d\xcf\x8c\xdd\x63\x3b\xed\x39\x75\x65\x39\x3b\x6e\xe8\x0a\x70\x76\x90\x37\x38\x99\x1d\xa1\x0e\x6d\xc7\xb0\x77\xce\xec\x47\xb8\xbb\x96\x7b\xcc\x47\x77\xb0\x74\xef\xe0\x90\xbe\xb5\x0e\x7b\x9b\x97\xf7\xff\x34\x3e\x77\x82\xe8\xf3\x1d\xc9\x6e\xff\x2a\x78\x34\xc5\x7b\x80\xe6\x71\x0b\xe0\x6c\x02\x30\xd0\x51\x7c\xa5\x15\xdb\x17\xa8\xb3\x02\x6b\xb2\xc5\x0f\xff\x5c\xa9\x8d\x74\xf0\xb4\x6a\x8b\x91\xbf\x8e\x82\xf3\x91\xbd\x40\xcd\x35\x39\x09\xca\xee\xaf\x00\x00\x00\xff\xff\xc7\xe7\x22\xc1\x9c\x1b\x00\x00")

func templatesBaseTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesBaseTf,
		"templates/base.tf",
	)
}

func templatesBaseTf() (*asset, error) {
	bytes, err := templatesBaseTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/base.tf", size: 7068, mode: os.FileMode(480), modTime: time.Unix(1549273016, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSec_groupTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x58\x7f\x6f\x9b\x30\x10\xfd\x9f\x4f\x71\x42\xfb\x73\xcb\xcc\xaf\xcc\x99\x54\xed\x83\x4c\x95\xe5\x18\xa7\x45\x75\x31\x32\x26\xdd\x54\xf1\xdd\x27\x83\x21\x69\xe2\x74\xa4\x03\x92\x4c\x55\x15\xeb\xc0\xf7\xde\xbd\xb3\xee\x39\xd9\x52\x95\xd1\xb5\xe0\xe0\xb3\x0d\xe1\xbf\x34\x57\x39\x15\xa4\x90\x4a\x97\x3e\xbc\x7a\x00\xfa\x77\xc1\xe1\x0e\x7c\x91\x95\xda\xf7\x00\x52\xbe\xa1\x95\xd0\x70\x07\x3f\x3d\x00\x00\x8c\x3e\x37\x9f\x71\x1c\xb5\x8b\x30\x0c\xc3\x2e\x14\x47\xf7\x5e\xed\x79\x3b\x90\xb5\x2c\x1f\xcf\xc9\xde\xa5\x5a\xe2\x25\xb6\xe9\x93\x24\xb1\xe9\x7b\xa0\x30\x09\x13\xe4\x42\xfa\x48\x41\x6e\x48\x8b\x19\x45\x78\xd5\xae\x30\x8e\x63\xbb\x3a\x2e\xb3\x7c\xa4\x8a\xa7\x44\xb3\xe2\x1c\xe4\x15\x5a\x59\x31\x57\x68\x15\xd8\xe4\x08\x5b\x3e\x38\x42\xa8\x5f\x75\x4f\x71\x4f\xa7\xd7\x3f\x42\x08\xed\xf4\xef\xb3\xd8\x58\x14\x27\xdf\x3a\x8c\x30\xea\x57\xe1\xa1\xa4\x18\x77\x0c\x62\x84\xec\x7b\x71\xd0\xad\x02\x8c\x02\x77\xc9\x55\x7a\x56\xc9\x7b\xa5\x44\xa8\x83\x5e\xa2\xb6\x99\x8a\x97\xb2\x52\xcc\x9c\x4d\x21\xab\xb4\xd4\x94\x3d\x91\x9c\xeb\x17\xa9\x9e\x08\x65\xc2\xb7\x5d\x2e\xab\x75\xce\x35\x29\x39\x23\x0f\x4a\x56\x45\x0b\xcd\x64\x95\x1b\x20\xff\xd3\xeb\x96\xaa\x45\xc9\x59\xa5\x38\xfc\x80\x00\xbe\x03\xaa\x0d\x99\x9c\x3e\x37\xe4\xf6\x92\x98\xf0\xb6\x60\x24\x4b\xdb\x9d\x7b\xc0\xdb\x82\x2d\xcc\x7f\x96\xd6\xbe\x61\xf7\x57\x7a\x44\x55\x82\x9f\xe2\x48\xf8\x83\xe2\x65\x39\x94\xaa\x49\xe7\xe0\xb4\x87\xb6\x70\xc2\xb4\x6c\x3d\x00\xc3\xa5\xc1\x32\xb9\x74\x26\x73\x93\x8b\x0a\x21\x5f\xfc\x26\xc8\xb2\x54\x11\xd3\xa5\xbe\x35\x00\x3e\x5a\x34\x7f\x5f\x91\x7f\xdf\x84\x0a\x25\xb5\x64\x52\xd8\xbd\xed\xce\xa6\xdb\x66\x57\xfb\x8e\x56\x74\xb3\xc9\x18\xe9\x3a\x6f\xeb\xf4\x00\xea\x21\x3d\x7d\x5f\xb4\x2a\x1d\xdc\xdc\xeb\x53\xcc\x90\x1f\xa2\x58\x96\x8f\x29\x59\x37\x02\x6f\x57\x37\xcd\x0e\x74\xb3\xe4\x1d\x13\xbe\xf6\x67\x50\x34\x63\xcf\x37\x7c\x0a\x1b\xf6\x4d\xd4\xac\x3a\x89\xbe\x04\xbb\x10\x93\xe9\x5e\xe8\xcc\xc3\x3a\x64\x68\x33\x99\x6b\x25\x05\x29\x04\xcd\xf9\xc7\xc7\xf6\x9b\x34\x53\x0c\xee\x13\x3c\xc7\x1f\xdd\x27\x80\x6e\x76\x78\x9f\x12\xce\x1c\xf5\x6b\x97\xad\x25\x64\x8e\x92\x79\x5c\x9f\x3b\x8f\xa6\x18\x43\xa7\xe4\x74\xdf\x32\xff\x47\x69\x0f\x2b\x9d\x57\xe0\x83\x3b\xed\x2d\x0b\x7c\x74\x07\x79\x2b\x70\x5f\xe9\x4c\x02\x8f\x6c\xa5\xb3\xcf\xd1\x89\xcd\x74\x80\x97\xa6\x54\xd3\x7f\x35\xd2\x5d\x8e\x29\x5c\xd4\xc5\x70\x7c\x0b\x75\xa1\xdc\xac\x7f\x3a\x25\x1b\xd9\x3c\xc7\x17\xec\x0a\x9d\xd3\x29\xe4\x84\xb6\x79\x4d\xa2\x4e\xec\x99\xef\x49\x3b\x85\x61\x5e\x42\xda\x0b\xb9\xa5\x7b\x62\x8e\xff\x3d\xfe\xc2\x33\xd3\x72\x3f\xfa\xdd\x79\x0e\x35\x47\xbe\x78\xcc\xab\xe4\xa4\xb7\x8e\x3f\x01\x00\x00\xff\xff\x38\x71\xa9\xcc\x11\x18\x00\x00")

func templatesSec_groupTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesSec_groupTf,
		"templates/sec_group.tf",
	)
}

func templatesSec_groupTf() (*asset, error) {
	bytes, err := templatesSec_groupTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/sec_group.tf", size: 6161, mode: os.FileMode(480), modTime: time.Unix(1549273016, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/base.tf":      templatesBaseTf,
	"templates/sec_group.tf": templatesSec_groupTf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"base.tf":      &bintree{templatesBaseTf, map[string]*bintree{}},
		"sec_group.tf": &bintree{templatesSec_groupTf, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
